"""
TableParser - 別表から国債銘柄情報を抽出
"""

import re
from typing import List, Optional
from dataclasses import dataclass
import logging

logger = logging.getLogger(__name__)


@dataclass
class BondIssuance:
    """国債発行情報"""
    sub_index: int
    bond_name: str
    bond_type: str
    series_number: str
    interest_rate: float
    maturity_date: str
    legal_basis: str
    face_value_individual: float
    # 新規追加フィールド
    issuance_date: Optional[str] = None
    issue_price: Optional[float] = None
    issue_amount: Optional[float] = None
    payment_date: Optional[str] = None


class TableParser:
    """別表解析パーサー"""
    
    PATTERNS = {
        'table_start': r'（別\s*表）',
        'bond_name_ritsuki': r'利\s*付国庫債券[（\(](\d+)年[）\)][（\(]第(\d+)回[）\)]',
        'bond_name_bukka': r'利付国庫債券[（\(]物価連動・(\d+)年[）\)][（\(]第(\d+)回[）\)]',
        'bond_name_gx': r'ク\s*ライメート・トランジション利付国庫債券[（\(](\d+)年[）\)][（\(]第(\d+)回[）\)]',
        'bond_name_tanki': r'国庫短期証券[（\(]第(\d+)回[）\)]',
        'bond_name_kojin': r'個\s*人向け利付国庫債券[（\(](.+?)[）\)][（\(]第(\d+)回[）\)]',
        'interest_rate': r'([\d.]+)％',
        'amount': r'([\d,]+)円',
        'wareki_date': r'令和(\d+)年(\d+)月(\d+)日',
    }
    
    def __init__(self):
        pass
    
    def parse_table(self, content: str, common_legal_basis: Optional[str] = None) -> List[BondIssuance]:
        bonds = []
        
        table_match = re.search(self.PATTERNS['table_start'], content)
        if not table_match:
            return bonds
        
        table_start = table_match.start()
        table_text = content[table_start:]
        lines = table_text.split('\n')
        
        header_idx = None
        for i, line in enumerate(lines):
            if '名称及び記号' in line:
                header_idx = i
                break
        
        if header_idx is None:
            return bonds
        
        format_type = self._detect_table_format(lines[header_idx:header_idx+10])
        
        if format_type == 4 and not common_legal_basis:
            common_legal_basis = self._extract_common_legal_basis(content)
        
        sub_index = 0
        i = header_idx + 1
        
        while i < len(lines):
            line = lines[i].strip()
            
            if not line or 'page=' in line or '©' in line:
                i += 1
                continue
            
            if line in ['利率', '（年）', '償還期限', '発行額', '（額面金額）',
                       '発行の根拠法律及びその条項', '利率（年）', '名称及び記号']:
                i += 1
                continue
            
            if '利付国庫債券' in line:
                sub_index += 1
                rows_needed = format_type
                data_lines = []
                for j in range(rows_needed):
                    if i + j < len(lines):
                        data_lines.append(lines[i + j].strip())
                
                bond = self._parse_multiline_bond(data_lines, sub_index, format_type, common_legal_basis)
                if bond:
                    bonds.append(bond)
                
                i += rows_needed
            else:
                i += 1
        
        return bonds
    
    def _detect_table_format(self, header_lines: List[str]) -> int:
        text = '\n'.join(header_lines)
        if '発行の根拠法律' in text:
            return 5
        else:
            return 4
    
    def _extract_common_legal_basis(self, content: str) -> Optional[str]:
        pattern1 = r'[２2]\s*発行の根拠法律及びその条項\s+(.+?)(?:\n[３3]|\n\n)'
        match = re.search(pattern1, content, re.DOTALL)
        if match:
            legal = match.group(1).strip()
            return re.sub(r'\s+', '', legal)
        return None
    
    def _parse_multiline_bond(self, lines: List[str], sub_index: int, format_type: int, 
                             common_legal_basis: Optional[str]) -> Optional[BondIssuance]:
        try:
            if format_type == 5:
                if len(lines) < 5:
                    return None
                
                name_line = lines[0]
                rate_line = lines[1]
                date_line = lines[2]
                legal_line = lines[3]
                amount_line = lines[4]
            else:
                if len(lines) < 4:
                    return None
                
                name_line = lines[0]
                rate_line = lines[1]
                date_line = lines[2]
                amount_line = lines[3]
                legal_line = None
            
            bond_match = re.search(self.PATTERNS['bond_name_ritsuki'], name_line)
            if not bond_match:
                return None
            
            bond_type = bond_match.group(1)
            series_number = f"第{bond_match.group(2)}回"
            bond_name = bond_match.group(0)
            
            rate_match = re.search(self.PATTERNS['interest_rate'], rate_line)
            interest_rate = float(rate_match.group(1)) if rate_match else 0.0
            
            maturity_date = date_line if '令和' in date_line else "不明"
            
            amount_match = re.search(self.PATTERNS['amount'], amount_line)
            if amount_match:
                amount_str = amount_match.group(1).replace(',', '')
                face_value = float(amount_str)
            else:
                face_value = 0.0
            
            if format_type == 5 and legal_line:
                legal_basis = legal_line
            else:
                legal_basis = common_legal_basis or "不明"
            
            return BondIssuance(
                sub_index=sub_index,
                bond_name=bond_name,
                bond_type=bond_type,
                series_number=series_number,
                interest_rate=interest_rate,
                maturity_date=maturity_date,
                legal_basis=legal_basis,
                face_value_individual=face_value
            )
        
        except Exception as e:
            logger.error(f"銘柄パースエラー: {e}")
            return None
    
    def extract_bond_info_from_single(self, content: str) -> Optional[BondIssuance]:
        """単一銘柄の告示から情報を抽出（拡張版）"""
        try:
            # 名称抽出
            name_match = re.search(r'[１1]\s*名称及び記号\s*(.+?)(?:[２2]\s*発行の根拠|$)', content, re.DOTALL)
            if not name_match:
                return None
            
            bond_name_text = name_match.group(1).strip()
            bond_name_text = re.sub(r'\s+', '', bond_name_text)
            
            bond_type = "不明"
            series_number = "不明"
            bond_name = bond_name_text
            
            # 債券種類の判定
            bond_match = re.search(self.PATTERNS['bond_name_gx'], bond_name_text)
            if bond_match:
                bond_type = bond_match.group(1)
                series_number = f"第{bond_match.group(2)}回"
                bond_name = bond_match.group(0)
            else:
                bond_match = re.search(self.PATTERNS['bond_name_bukka'], bond_name_text)
                if bond_match:
                    bond_type = f"物価連動・{bond_match.group(1)}"
                    series_number = f"第{bond_match.group(2)}回"
                    bond_name = bond_match.group(0)
                else:
                    bond_match = re.search(self.PATTERNS['bond_name_ritsuki'], bond_name_text)
                    if bond_match:
                        bond_type = bond_match.group(1)
                        series_number = f"第{bond_match.group(2)}回"
                        bond_name = bond_match.group(0)
                    else:
                        bond_match = re.search(self.PATTERNS['bond_name_tanki'], bond_name_text)
                        if bond_match:
                            bond_type = "短期"
                            series_number = f"第{bond_match.group(1)}回"
                            bond_name = bond_match.group(0)
                        else:
                            bond_match = re.search(self.PATTERNS['bond_name_kojin'], bond_name_text)
                            if bond_match:
                                bond_type = bond_match.group(1)
                                series_number = f"第{bond_match.group(2)}回"
                                bond_name = bond_match.group(0)
            
            # 利率抽出
            interest_rate = 0.0
            rate_match = re.search(r'1[012]\s+(?:利率|　利率)\s+年([\d.]+)％', content)
            if rate_match:
                interest_rate = float(rate_match.group(1))
            else:
                rate_match = re.search(r'初期利子の適用利率\s+年([\d.]+)％', content)
                if rate_match:
                    interest_rate = float(rate_match.group(1))
            
            # 償還期限抽出
            maturity_date = "不明"
            maturity_match = re.search(r'1[2-9]\s+(?:償還期限|　償還期限)\s+(令和\d+年\d+月\d+日)', content)
            if maturity_match:
                maturity_date = maturity_match.group(1)
            else:
                maturity_match = re.search(r'1[2-9]\s*償還期限\s*(令和\d+年\d+月\d+日)', content)
                if maturity_match:
                    maturity_date = maturity_match.group(1)
            
            # 【新規追加】発行日抽出
            issuance_date = None
            issuance_match = re.search(r'10\s+(?:発行日|　発行日)\s+(令和\d+年\d+月\d+日)', content)
            if issuance_match:
                issuance_date = issuance_match.group(1)
            else:
                # パターン2: スペースなし
                issuance_match = re.search(r'10\s*発行日\s*(令和\d+年\d+月\d+日)', content)
                if issuance_match:
                    issuance_date = issuance_match.group(1)
            
            # 【新規追加】払込日抽出
            payment_date = None
            payment_match = re.search(r'19\s+(?:払込期日|　払込期日)\s+(令和\d+年\d+月\d+日)', content)
            if payment_match:
                payment_date = payment_match.group(1)
            else:
                payment_match = re.search(r'19\s*払込期日\s*(令和\d+年\d+月\d+日)', content)
                if payment_match:
                    payment_date = payment_match.group(1)
            
            # 【新規追加】発行価格抽出
            issue_price = None
            # パターン1: 価格競争入札発行の平均価格
            price_match = re.search(r'国債市場特別参加者・第Ⅰ非価格競争入札発行\s+額面金額100円につき([\d]+)円([\d]+)銭([\d]+)厘', content)
            if price_match:
                yen = int(price_match.group(1))
                sen = int(price_match.group(2))
                rin = int(price_match.group(3))
                issue_price = yen + sen / 10 + rin / 100
            else:
                # パターン2: シンプルな価格表記
                price_match = re.search(r'11\s+発行価格.*?額面金額100円につき([\d]+)円([\d]+)銭([\d]+)厘', content, re.DOTALL)
                if price_match:
                    yen = int(price_match.group(1))
                    sen = int(price_match.group(2))
                    rin = int(price_match.group(3))
                    issue_price = yen + sen / 10 + rin / 100
            
            # 発行額抽出（既存ロジック強化）
            face_value = 0.0
            issue_amount = None
            
            # パターン1: 価格競争入札発行
            amount_match = re.search(r'価格競争入札発行\s+額面金額で([\d,]+)円', content)
            if amount_match:
                amount_str = amount_match.group(1).replace(',', '')
                issue_amount = float(amount_str)
                face_value = issue_amount
            else:
                # パターン2: 発行額の項目
                amount_match = re.search(r'[４４4５5６6]\s+(?:発行額|　発行額)\s+額面金額で([\d,]+)円', content)
                if amount_match:
                    amount_str = amount_match.group(1).replace(',', '')
                    issue_amount = float(amount_str)
                    face_value = issue_amount
            
            # 法令根拠抽出（改行完全対応版）
            legal_basis = "不明"
            
            # パターン1: 標準形式「２ 発行の根拠法律及びその条項 法令名」
            legal_match = re.search(r'[２2]\s*発行の根拠法律及びその条項\s*(.+?)(?:\n\s*[３3４4５5６6]|\n\n|振替法)', content, re.DOTALL)
            
            if legal_match:
                legal_basis = legal_match.group(1).strip()
                legal_basis = re.sub(r'\s+', '', legal_basis)
            else:
                # パターン2: 改行あり「２ 発行の根拠法律及び 法令名\nその条項」
                # 「発行の根拠法律及び」の直後から次の項目まで全て取得
                legal_match = re.search(r'[２2]\s*発行の根拠法律及び\s*(.+?)(?:\n\s*[３3４4５5６6]|振替法)', content, re.DOTALL)
                if legal_match:
                    legal_text = legal_match.group(1).strip()
                    # 「その条項」という文字列を削除（改行前後にあるケースに対応）
                    legal_text = re.sub(r'\n?\s*その条項\s*\n?', '', legal_text)
                    legal_text = re.sub(r'\s+', '', legal_text)
                    if legal_text:
                        legal_basis = legal_text
            
            return BondIssuance(
                sub_index=1,
                bond_name=bond_name,
                bond_type=bond_type,
                series_number=series_number,
                interest_rate=interest_rate,
                maturity_date=maturity_date,
                legal_basis=legal_basis,
                face_value_individual=face_value,
                # 新規追加フィールド
                issuance_date=issuance_date,
                issue_price=issue_price,
                issue_amount=issue_amount,
                payment_date=payment_date
            )
        
        except Exception as e:
            logger.error(f"単一銘柄の抽出エラー: {e}")
            return None